/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as AdminImport } from './routes/_admin'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutPageImport } from './routes/_layout/page'
import { Route as LayoutExplorerImport } from './routes/_layout/explorer'
import { Route as LayoutAboutImport } from './routes/_layout/about'
import { Route as AdminAdminSettingsImport } from './routes/_admin/admin/settings'
import { Route as AdminAdminPageTagsImport } from './routes/_admin/admin/pageTags'
import { Route as AdminAdminItemsImport } from './routes/_admin/admin/items'
import { Route as AdminAdminExternalPagesImport } from './routes/_admin/admin/externalPages'
import { Route as AdminAdminDashboardImport } from './routes/_admin/admin/dashboard'
import { Route as AdminAdminAdminImport } from './routes/_admin/admin/admin'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPageRoute = LayoutPageImport.update({
  path: '/page',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExplorerRoute = LayoutExplorerImport.update({
  path: '/explorer',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAboutRoute = LayoutAboutImport.update({
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)

const AdminAdminSettingsRoute = AdminAdminSettingsImport.update({
  path: '/admin/settings',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAdminPageTagsRoute = AdminAdminPageTagsImport.update({
  path: '/admin/pageTags',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAdminItemsRoute = AdminAdminItemsImport.update({
  path: '/admin/items',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAdminExternalPagesRoute = AdminAdminExternalPagesImport.update({
  path: '/admin/externalPages',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAdminDashboardRoute = AdminAdminDashboardImport.update({
  path: '/admin/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

const AdminAdminAdminRoute = AdminAdminAdminImport.update({
  path: '/admin/admin',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_admin': {
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/about': {
      preLoaderRoute: typeof LayoutAboutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/explorer': {
      preLoaderRoute: typeof LayoutExplorerImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/page': {
      preLoaderRoute: typeof LayoutPageImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_admin/admin/admin': {
      preLoaderRoute: typeof AdminAdminAdminImport
      parentRoute: typeof AdminImport
    }
    '/_admin/admin/dashboard': {
      preLoaderRoute: typeof AdminAdminDashboardImport
      parentRoute: typeof AdminImport
    }
    '/_admin/admin/externalPages': {
      preLoaderRoute: typeof AdminAdminExternalPagesImport
      parentRoute: typeof AdminImport
    }
    '/_admin/admin/items': {
      preLoaderRoute: typeof AdminAdminItemsImport
      parentRoute: typeof AdminImport
    }
    '/_admin/admin/pageTags': {
      preLoaderRoute: typeof AdminAdminPageTagsImport
      parentRoute: typeof AdminImport
    }
    '/_admin/admin/settings': {
      preLoaderRoute: typeof AdminAdminSettingsImport
      parentRoute: typeof AdminImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  AdminRoute.addChildren([
    AdminAdminAdminRoute,
    AdminAdminDashboardRoute,
    AdminAdminExternalPagesRoute,
    AdminAdminItemsRoute,
    AdminAdminPageTagsRoute,
    AdminAdminSettingsRoute,
  ]),
  LayoutRoute.addChildren([
    LayoutAboutRoute,
    LayoutExplorerRoute,
    LayoutPageRoute,
    LayoutIndexRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
  SignupRoute,
])

/* prettier-ignore-end */
